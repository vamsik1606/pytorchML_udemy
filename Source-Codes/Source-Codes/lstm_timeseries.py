# -*- coding: utf-8 -*-
"""LSTM-TimeSeries.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GpYa2Aeu7LGx_kqi4KxdoycSDMa89Hpt

**Importing Required Libraries**
"""

import torch
import torch.nn as nn
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler

"""**Data Preparation**"""

df = pd.read_csv('Temp_Data.csv')
df

df = df.iloc[:,-1]
df

plt.figure(figsize=(14,5))
plt.plot(df)
plt.title('New York Temperature - Jan-Feb 2022')
plt.grid(True)
plt.xlabel('Hour')
plt.ylabel('Temperature (C)')
plt.show()

train = df.iloc[:744].values
test = df.iloc[744:].values

scaler = MinMaxScaler(feature_range=(0,1))
train_N = scaler.fit_transform(train.reshape(-1,1))

train_N

train_N = torch.Tensor(train_N)
train_N

train_N = torch.Tensor(train_N).view(-1)
train_N

WS = 24        # [1,2,3,...,24] ---> [25]  / [2,3,4,...,25] ---> [26]
X_train = [] 
y_train = []

for i in range(len(train_N)-WS):
  X_train.append(train_N[i:i+WS]) # train_N[1:25]
  y_train.append(train_N[i+WS:i+WS+1]) # train_N[25:26]

y_train

"""**Creating LSTM Model**"""

class LSTM(nn.Module):
  def __init__(self,input_size=1,hidden_size=60,output_size=1):
    super().__init__()

    self.hidden_size = hidden_size
    self.lstm = nn.LSTM(input_size,hidden_size)
    self.linear = nn.Linear(hidden_size,output_size)

    self.hidden_cell = (torch.zeros(1,1,self.hidden_size),torch.zeros(1,1,self.hidden_size))

  def forward(self,input_seq):                         #(window_size,1,input_size)
    lstm_out, self.hidden_cell = self.lstm(input_seq.view(len(input_seq),1,-1),self.hidden_cell)
    predictions = self.linear(lstm_out.view(len(input_seq),-1))
    return predictions[-1]

model = LSTM()

criterion = nn.MSELoss()
optimizer = torch.optim.Adam(model.parameters(),lr = 0.001)

"""**Training Stage**"""

epochs = 50

for i in range(epochs):
  optimizer.zero_grad()
  model.hidden_cell = (torch.zeros(1,1,model.hidden_size),torch.zeros(1,1,model.hidden_size))
  for x in X_train:
    y_pred = model(x)
  for y in y_train:
    loss = criterion(y_pred,y)
  
  loss.backward()
  optimizer.step()

  print(f'epoch: {i:2}, Loss: {loss.item():8.6f}')

"""**Testing Stage**"""

preds = train_N[-WS:].tolist()

model.eval()

for i in range(24):
  seq = torch.Tensor(preds[-WS:])
  with torch.no_grad():
    preds.append(model(seq).item())

predictions = preds[:WS]

predictions

predictions = scaler.inverse_transform(np.array(predictions).reshape(-1,1))
predictions

test

"""**Evaluation**"""

plt.figure(figsize=(14,5))
plt.plot(test,label='Actual Temperatures')
plt.plot(predictions, label = 'Predicted Temperatures')
plt.grid()
plt.title('New York Temp (Actual VS Predictions')
plt.xlabel('Hour')
plt.ylabel('Temp (C)')
plt.legend()
plt.show()

mae = torch.abs(torch.tensor(predictions)-torch.tensor(test)).mean()
print('Mean Absolute Error: ',mae.item())